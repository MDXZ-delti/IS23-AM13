@startuml


box "Client" #LightBlue
participant ClientModel
participant ClientParser
participant ClientController

end box

box "Server" #Pink
participant ServerController
participant ServerParser
participant GameController
participant Game
end box

ServerParser <-- GameController: currentPlayer turn
ServerParser --> ServerController: currentPlayer turn

ServerController -->ClientController: it's your turn
ClientController -->ClientParser: it's your turn
ClientParser -->ClientModel: It's your turn
ClientModel->ClientModel: pick();
ClientModel->ClientModel: checkPick();
ClientModel->ClientParser: pick
ClientParser->ClientController: pick

ClientController-> ServerController: pick

ServerController->ServerParser: pick
ServerParser->GameController: pick
GameController->Game: pick
Game->Game: checkPick();
Game-->GameController: result check pick
GameController-->ServerParser: result check pick

alt pick is valid
ServerParser-->ServerController: pick is valid
ServerController-->ClientController: pick is valid
ClientParser<--ClientController:rearrange();
ClientModel<--ClientParser:rearrange();

else pick is invalid
ServerParser-->ServerController: please pick again
ServerController-->ClientController: please pick again
ClientController-->ClientParser: please pick again
ClientParser-->ClientModel: please pick again


end
ClientModel->ClientParser:rearrange
ClientParser->ClientController:rearrange
ClientController->ServerController: rearrange
ServerController->ServerParser: rearrange
ServerParser->GameController: rearrange
GameController->Game: rearrange
Game->Game: move();
Game--> GameController: Game Update

GameController->GameController: gameOver();

alt game is not over

GameController-->ServerParser: Game Update

ServerParser-->ServerController: Game Update
ServerController-->ClientController: Game Update
ClientController-->ClientParser: Game Update
ClientParser-->ClientModel: Game Update



else game is over
GameController-->ServerParser: game over
ServerParser-->ServerController: game over
ServerController-->ClientController: game over
ClientController-->ClientParser: game over
ClientParser-->ClientModel: game over


GameController->Game: setWinner()
Game-->GameController: winner(s)
GameController-->ServerParser: winner(s)
ServerParser--> ServerController: winner(s)
ServerController-->ClientController: winner(s)
ClientController-->ClientParser: winner(s)
ClientParser-->ClientModel: winner(s)

end
'Client->ServerController: bookshelf points update
'ServerController->GameController: bookshelf points update
'GameController->GameController: check points





@enduml