@startuml


box "Client" #LightBlue
participant ClientModel
participant ClientController

end box

box "Server" #Pink
participant ServerController
participant ServerParser
participant GameController
participant Game
end box

ServerController <-- GameController: currentPlayer turn
ServerController -->ClientController: it's your turn
ClientController -->ClientModel: it's your turn
ClientModel->ClientModel: pick();
ClientModel->ClientModel: checkPick();
ClientModel->ClientController: pick

ClientController-> ServerController: pick
ServerController->GameController: pick
GameController->Game: Pick
Game->Game: checkPick();
Game-->GameController: result check pick
alt pick is valid
GameController-->ServerController: pick is valid
ServerController-->ClientController: pick is valid
ClientModel<--ClientController:rearrange();
else pick is invalid
GameController-->ServerController: please pick again
ServerController-->ClientController: please pick again
end
ClientModel->ClientController:rearrange
ClientController->ServerController: rearrange
ServerController->GameController: rearrange
GameController->Game: rearrange
Game->Game: move();
Game--> GameController: Game Update
GameController->GameController: gameOver();

alt game is not over

GameController-->ServerController: Game Update
ServerController-->ClientController: Game Update

else game is over
GameController-->ServerController: game over
ServerController-->ClientController: game over
GameController->Game: setWinner()
Game-->GameController: winner(s)
GameController-->ServerController: winner(s)
ServerController-->ClientController: winner(s)

end
'Client->ServerController: bookshelf points update
'ServerController->GameController: bookshelf points update
'GameController->GameController: check points





@enduml