@startuml
'The controller will receiver the move command from the client and
'will call remove and insert on the board and the bookshelf.
'The link Board-Player is a static list.
'The reference to CommonGoal (a list of 1 or 2 elements) is static.
'The checks, like Bookshelf's checkComplete, go in the client.
'Consider aggregating the layouts (with parameters).
'[] Add a method setNickname (in Player?).
'[] Convert Bookshelf goal in a hashMap.
'[] Add a method drawCards.
'[] Add (somewhere) a check for the insertion in the bookshelf of the selection.
'[] Check when the board has to be refilled.



class Board
note top: Sets the available tiles in the constructor. We suppose this is the controller.
Player "1" -- "1..2" CommonGoal
Player "1" -- "1" PersonalGoal
Player "1" - "1" Bookshelf
Board "1" - "1" Player
Item "81" --o "1" Board
Item "1..30" --o "1" Bookshelf
Color - Item
CommonGoal -- Layout
GameBoard - Board

class Item {
    -Color color
    -int number
    -- Getters --
    +getColor()
    +getNumber()
    .. Constructors ..
    +Item(Color color, int number)
}

class PersonalGoal {
    -HashMap<[Integer,Integer],Color> goal
    -int reached
    ..Getters..
    +getHashMap()
    +getGoal()
    +getPoints(Bookshelf b)
}

note left of PersonalGoal::reached
    it indicates the number of cells filled with the "right colour"
end note

note right of PersonalGoal::goal
    The goal's configuration.
end note

class Player {
    -String nickname
    -int age
    -int score
    -boolean hasEndGameCard
    -boolean isFirstPlayer
    -Bookshelf bookshelf
    -List<Boolean> commonGoalReached;
    --
    +calculateScore()
    +calculatePersonalGoal()
    +calculateCommonGoal()
    +calculateGroups()
    +isFirstPlayer()
    +drawPersonalCard()
    .. Getters ..
    +getNickname()
    +getAge()
    .. Constructors ..
    +Player(String name, boolean isFirstGame)
    +Player(String name, boolean isFirstPlayer, boolean isFirstGame)
}

note right of Player
    Constructor for first player
end note

class GameBoard {
    -List<CommonGoal> commonGoal
    -List<Player> players
    -Player currentPlayer
    ..Getters..
    +getCurrentPlayer()
    +getPlayers()
    ..Setters..
    +initialize()
}


class Board {
    +fill()
    .. Getters ..

    +getItems()
    .. Setters ..
    +pick()
    .. Constructors ..
    +Board(int numberOfPlayers)
}

note left of Board::fill
    This is the initializer.
end note

class CommonGoal {
    -List<Integer> scoringList
    -Layout layout
    ---
    +assignScore(Player player)
    .. Getters ..
    +getScoringList()
    +getScoring()
    +getLayout()
    .. Constructors ..
    +CommonGoal(int numberOfPlayers, Layout pattern)
}

enum Color {
    GREEN
    WHITE
    YELLOW
    BLUE
    LIGHTBLUE
    PINK
}

class Bookshelf {
    -int remainingFreeCells
    ---
    +isFull()
    +getFreeCells()
    +insert(int column, List<Item> items)
    ..Constructors..
    +Bookshelf()
}

abstract Layout {
    -int width
    -int height
    -int minDifferent
    -int maxDifferent
    -int occurrences
    -boolean rotate
    ---
    +check(Bookshelf b)
    +getCurrent(Bookshelf b)
    +getLayoutType()
    ..Constructor..
    +Layout(int width, int height, int minDifferent, int maxDifferent, int occurrences, boolean rotate)
}

note right of Layout::rotate
    flag for possible rotation
end note

note left of Layout::getCurrent
    Returns the number of instances currently occurring for the specific common goal.
end note

class ShapeLayout extends Layout{
    +check(Bookshelf b)
    +getCurrent(Bookshelf b)
    +getLayoutType()
    ..Constructor..
    +ShapeLayout()
}

class Stairs extends Layout{
    -boolean diagonal
    -boolean doubleDiagonal
    ---
    +check(Bookshelf b)
        +getCurrent(Bookshelf b)
        +getLayoutType()
    ....Constructor....
    +Stairs(boolean diagonal, boolean doubleDiagonal)
}

note left of Stairs::diagonal
    it distinguishes the stair from the diagonal
end note

class Corners extends Layout{
    +check(Bookshelf b)
    +getCurrent(Bookshelf b)
    +getLayoutType()
    ..Constructor..
    +Corners()
}



@enduml
