@startuml
'The controller will receiver the move command from the client and
'will call remove and insert on the board and the bookshelf.
'The link Board-Player is a static list.
'The reference to CommonGoal (a list of 1 or 2 elements) is static.
'The checks, like Bookshelf's checkComplete, go in the client.

'TODO:
'[ ] Consider adding a method setNickname.
'[ ] Add a method drawCards.
'[ ] Check when the board has to be refilled.

class Board
Player "1" -- "1..2" CommonGoal
Player "1" -- "1" PersonalGoal
Player "1" - "1" Bookshelf
Board "1" - "1" Player
Item "81" --o "1" Board
Item "0..30" --o "1" Bookshelf
Color - Item
CommonGoal -- Layout
GameBoard - Board

class Item {
    -Color color
    -int number
    -- Getters --
    +getColor()
    +getNumber()
    .. Constructors ..
    +Item(Color color, int number)
}

class PersonalGoal {
    -HashMap<IntegerPair, Color> personalGoalCard
    -int currentReached
    .. Getters ..
    +getColor(IntegerPair hey)
    +getPoints()
    +ColorReached()
}

note left of PersonalGoal::reached
    it indicates the number of cells filled with the "right colour"
end note

note right of PersonalGoal::goal
    The goal's configuration.
end note

class Player {
    -String nickname
    -int age
    -int score
    -boolean hasEndGameCard
    -boolean isFirstPlayer
    -List<Boolean> commonGoalReached;
    ----
    +calculateScore()
    +calculatePersonalGoal()
    +calculateCommonGoal()
    +calculateGroups()
    +isFirstPlayer()
    +drawPersonalCard()
    .. Getters ..
    +getNickname()
    +getAge()
    .. Constructors ..
    +Player(String name, boolean isFirstGame)
    +Player(String name, boolean isFirstGame, boolean isFirstPlayer)
}

class GameBoard {
    -List<CommonGoal> commonGoalDeck
    -List<PersonalGoal> personalGoalDeck
    -List<Player> players
    -Player currentPlayer
    .. Getters ..
    +getCurrentPlayer()
    +getPlayers()
    .. Setters ..
    +initialize()
    +refill()
}

class Board {
    .. Getters ..
    +getItems()
    .. Setters ..
    +pick()
    .. Constructors ..
    +Board(int numberOfPlayers)
}

note left of Board::Board
    Sets the available tiles.
end note

class CommonGoal {
    -List<Integer> scoringList
    -Layout layout
    ----
    +assignScore(Player player)
    .. Getters ..
    +getScoringList()
    +getScoring()
    +getLayout()
    .. Constructors ..
    +CommonGoal(int numberOfPlayers, Layout pattern)
}

enum Color {
    GREEN
    WHITE
    YELLOW
    BLUE
    LIGHTBLUE
    PINK
}

class Bookshelf {
    -int rows
    -int columns
    ----
    +insert(int column, List<Item> items)
    .. Getters ..
    +getRows()
    +getColumns()
    +getFreeCellsInColumn(int column)
    .. Constructors ..
    +Bookshelf()
}

abstract Layout {
    -int width
    -int height
    -int minDifferent
    -int maxDifferent
    -int occurrences
    -boolean rotate
    ----
    +check(Bookshelf b)
    +getCurrent(Bookshelf b)
    +getLayoutType()
    .. Constructors ..
    +Layout(int width, int height, int minDifferent, int maxDifferent, int occurrences, boolean rotate)
}

note right of Layout::rotate
    Flag for possible rotation.
end note

note right of Layout::getCurrent
    Returns the number of instances currently occurring for the specific common goal.
end note

class ShapeLayout extends Layout{
    +check(Bookshelf b)
    +getCurrent(Bookshelf b)
    +getLayoutType()
    .. Constructors ..
    +ShapeLayout()
}

class Stairs extends Layout{
    -boolean diagonal
    -boolean doubleDiagonal
    ----
    +check(Bookshelf b)
    +getCurrent(Bookshelf b)
    +getLayoutType()
    .. Constructors ..
    +Stairs(boolean diagonal, boolean doubleDiagonal)
}

note left of Stairs::diagonal
    It distinguishes the stair from the diagonal.
end note

class Corners extends Layout{
    +check(Bookshelf b)
    +getCurrent(Bookshelf b)
    +getLayoutType()
    .. Constructors ..
    +Corners()
}
@enduml
